iadj = require("modules.input_adjust")
gcst = require("modules.global_constants")

go.property("alpha", 10000)
go.property("attach_radius", 3)

go.property("border", 50)
go.property("wnd_width", 640)
go.property("wnd_height", 1136)
go.property("relative", true)

go.property("actual_pos", vmath.vector3())
go.property("shift_pos", vmath.vector3())
go.property("swinging_range", 12)
go.property("swinging_duration", 2)

function init(self)
	msg.post(".", "acquire_input_focus")
	local pos = go.get_position()
	self.actual_pos.x = pos.x
	self.actual_pos.y = pos.y
	
	self.pivot = vmath.vector3()
	self.target = pos

	-- 'swinging' animation
	go.set("#", "shift_pos.y", -self.swinging_range / 2)
	go.animate("#", "shift_pos.y", go.PLAYBACK_LOOP_PINGPONG,
	self.swinging_range / 2, go.EASING_INOUTSINE, self.swinging_duration)
end

function update(self, dt)
	local pos = self.actual_pos
	local dvec = self.target - pos
	local dist = vmath.length(dvec)
	
	if dist > self.attach_radius then
		-- v = sqrt(2 * alpha * S)
		local speed = math.sqrt(2 * dist * self.alpha)
		local dir = vmath.normalize(dvec)
		local dpos = dir * speed * dt
		
		self.actual_pos = pos + dpos
	end
	go.set_position(self.actual_pos + self.shift_pos)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if action.x and action.y then
			local x, y = iadj.adjust(action.x, action.y)
			local pos = self.actual_pos
			if self.relative then
				if action.pressed then
					self.pivot = vmath.vector3(x - pos.x, y - pos.y, 0)
				end
				self.target = vmath.vector3(x, y, pos.z) - self.pivot
			else
				self.target = vmath.vector3(x, y, pos.z)
			end
			self.target.x = math.min(math.max(self.border, self.target.x), gcst.wnd_width - self.border)
			self.target.y = math.min(math.max(self.border, self.target.y), gcst.wnd_height - self.border)
		end
	end
end